仍然使用intel CPU的特殊指令，在现有算法上进行改进。共有3个改进点：
改进1：利用更大的块子符。
通用串匹配算法需要考虑8位，即字符表的大小为256。但是DNA只有ACGT四种表示，或者20种标准氨基酸，可以使用CPU的字长一次性的处理更多的信息位。
需要实验测试最佳的位数。
改进2：
改变SHIFT[HASH]表的作用。不论是否存在匹配可能性，都按照最大可能跳跃长度进行跳跃。不再使用SHIFT表进行匹配可能性检测。
实验证明该改进的性能。
改进3：
计算SHIFT的时候，考虑当前窗口的下一个字符。就是QS的思路。
实验说明这种改进的效果。
改进4：
计算窗口内匹配的时候，能否不逐个字符匹配，而是强制转换为INT32,INT64进行匹配？这种方式能用到INTEL指令吗？实验看看效果如何？


以上想法其实没有认真考虑到子缀的影响，
我对epsm的改进点，对于有多个hash值匹配的情况，用kmp或类似so算法遍历，提高其最差情况下的性能
---------------------
分析：
1.Release版本能快一倍；
2.shift数组大小设为2048是最合适的，；
3.新想法：考虑到以前块读取大小为8字节，即DNA串组合有65536种可能，但数组大小只有2048，造成严重的hash冲突，使整体跳数降低。所以考虑减少块读取大小，于是将其设为6字节，即4096中可能，hash冲突较小，且重复率也不是特别高。具体实现是，还是一次读8个字节，但用一个ulonglong的掩码0xffffffffffff0000与其做与运算，即获得一6字节串。


还是采用定长，但通过改变块读取大小来增加跳转长度，比如默认是8，则跳转m-8，现在改为5，则跳转m-5，虽然块读取大小减小会造成更多的hash冲突，所以在memcmp前计算64bit指纹，这样就大大减少了调用memcmp的次数，目前这个改进效果最好。

A R D C Q E H I G N L K M F P S T W Y V
S. Deusdado and P. Carvalho. GRASPm: an efficient algorithm for exact pattern-matching in genomic sequences. Int. J. Bioinformatics Res. Appl., vol.5, n.4, pp.385--401, Inderscience Publishers, Inderscience Publishers, Geneva, SWITZERLAND, (2009).

K.K.Senapati, Sandip Mal, G.Sahoo. RS-A Fast Pattern Matching Algorithm for Biological Sequences. International Journal of Engineering and InnovativeTechnology (IJEIT) Volume 1, Issue 3, March 2012

C:\Program Files (x86)\SSH Communications Security\SSH Secure Shell
c:\app\wangli\product\12.1.0\dbhome_1\bin;C:\windows\system32\;C:\Program Files\CTEX\UserData\miktex\bin;C:\Program Files\CTEX\MiKTeX\miktex\bin;C:\Program Files\CTEX\CTeX\ctex\bin;C:\Program Files\CTEX\CTeX\cct\bin;C:\Program Files\CTEX\CTeX\ty\bin;C:\Program Files\CTEX\Ghostscript\gs9.05\bin;C:\Program Files\CTEX\GSview\gsview;C:\Program Files\CTEX\WinEdt;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;C:\Program Files (x86)\MySQL\MySQL Utilities 1.3.6\;C:\Program Files (x86)\Microsoft SQL Server\110\DTS\Binn\;C:\Program Files\Microsoft SQL Server\110\DTS\Binn\;C:\apache-maven-3.2.1\bin;C:\Program Files (x86)\gVimPortable_7.4\vim74

CTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGCTTCTGAAC
TGGTTACCTGCCGTGAGTAAATTAAAATTTTATTGACTTAGGTCACTAAATACTTTAACCAATATAGGCATAGCGCACAG
ACAGATAAAAATTACAGAGTACACAACATCCATGAAACGCATTAGCACCACCATTACCACCACCATCACCATTACCACAG
GTAACGGTGCGGGCTGACGCGTACAGGAAACACAGAAAAAAGCCCGCACCTGACAGTGCGGGCTTTTTTTTTCGACCAAA
GGTAACGAGGTAACAACCATGCGAGTGTTGAAGTTCGGCGGTACATCAGTGGCAAATGCAGAACGTTTTCTGCGTGTTGC
CGATATTCTGGAAAGCAATGCCAGGCAGGGGCAGGTGGCCACCGTCCTCTCTGCCCCCGCCAAAATCACCAACCACCTGG
TGGCGATGATTGAAAAAACCATTAGCGGCCAGGATGCTTTACCCAATATCAGCGATGCCGAACGTATTTTTGCCGAACTT
TTGACGGGACTCGCCGCCGCCCAGCCGGGGTTCCCGCTGGCGCAATTGAAAACTTTCGTCGATCAGGAATTTGCCCAAAT
AAAACATGTCCTGCATGGCATTAGTTTGTTGGGGCAGTGCCCGGATAGCATCAACGCTGCGCTGATTTGCCGTGGCGAGA
AAATGTCGATCGCCATTATGGCCGGCGTATTAGAAGCGCGCGGTCACAACGTTACTGTTATCGATCCGGTCGAAAAACTG
CTGGCAGTGGGGCATTACCTCGAATCTACCGTCGATATTGCTGAGTCCACCCGCCGTATTGCGGCAAGCCGCATTCCGGC
TGATCACATGGTGCTGATGGCAGGTTTCACCGCCGGTAATGAAAAAGGCGAACTGGTGGTGCTTGGACGCAACGGTTCCG
ACTACTCTGCTGCGGTGCTGGCTGCCTGTTTACGCGCCGATTGTTGCGAGATTTGGACGGACGTTGACGGGGTCTATACC
TGCGACCCGCGTCAGGTGCCCGATGCGAGGTTGTTGAAGTCGATGTCCTACCAGGAAGCGATGGAGCTTTCCTACTTCGG
CGCTAAAGTTCTTCACCCCCGCACCATTACCCCCATCGCCCAGTTCCAGATCCCTTGCCTGATTAAAAATACCGGAAATC
CTCAAGCACCAGGTACGCTCATTGGTGCCAGCCGTGATGAAGACGAATTACCGGTCAAGGGCATTTCCAATCTGAATAAC
ATGGCAATGTTCAGCGTTTCTGGTCCGGGGATGAAAGGGATGGTCGGCATGGCGGCGCGCGTCTTTGCAGCGATGTCACG
CGCCCGTATTTCCGTGGTGCTGATTACGCAATCATCTT














